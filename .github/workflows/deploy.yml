# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "dev4" ]
  pull_request:
    branches: [ "dev4" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: YOUR_GCP_PROJECT_ID
          version: 'latest'  # Specify the version if needed

      # Step 3: Authenticate with the service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: '${{ secrets.GCP_SECRET_KEY }}'

      # Step 3: Fetch secrets from Google Secret Manager
      - name: Fetch Secrets
        run: |
          export DB_URL=$(gcloud secrets versions access latest --secret="DB_URL")
          export DB_USERNAME=$(gcloud secrets versions access latest --secret="DB_USERNAME")
          export DB_PASSWORD=$(gcloud secrets versions access latest --secret="DB_PASSWORD")
          export OAUTH2_CLIENT_ID=$(gcloud secrets versions access latest --secret="OAUTH2_REGISTRATION_CLIENT_ID")
          export OAUTH2_CLIENT_SECRET=$(gcloud secrets versions access latest --secret="OAUTH2_REGISTRATION_CLIENT_PASSWORD")
          export BRAINTREE_MERCHANT_ID=$(gcloud secrets versions access latest --secret="BRAINTREE_SANDBOX_MERCHANT_ID")
          export BRAINTREE_PUBLIC_KEY=$(gcloud secrets versions access latest --secret="BRAINTREE_SANDBOX_PUBLIC_KEY")
          export BRAINTREE_PRIVATE_KEY=$(gcloud secrets versions access latest --secret="BRAINTREE_SANDBOX_PRIVATE_KEY")
          export OCR_API_KEY=$(gcloud secrets versions access latest --secret="OCR_API_KEY")
          export GROQ_API_KEY=$(gcloud secrets versions access latest --secret="GROQ_API_KEY")
          export MAIL_ID=$(gcloud secrets versions access latest --secret="MAIL_ID")
          export MAIL_PASSKEY=$(gcloud secrets versions access latest --secret="MAIL_PASSKEY")
          export OAUTH2_REDIRECT_URI=${{ secrets.REDIRECT_URI }}

      # Step 4: Replace placeholders in app.yaml
      - name: Replace placeholders in app.yaml
        run: |
          sed -i "s/SPRING_DATASOURCE_URL_PLACEHOLDER/$DB_URL/" app.yaml
          sed -i "s/SPRING_DATASOURCE_USERNAME_PLACEHOLDER/$DB_USERNAME/" app.yaml
          sed -i "s/SPRING_DATASOURCE_PASSWORD_PLACEHOLDER/$DB_PASSWORD/" app.yaml
          sed -i "s/OAUTH2_CLIENT_ID_PLACEHOLDER/$OAUTH2_CLIENT_ID/" app.yaml
          sed -i "s/OAUTH2_CLIENT_SECRET_PLACEHOLDER/$OAUTH2_CLIENT_SECRET/" app.yaml
          sed -i "s/BRAINTREE_MERCHANT_ID_PLACEHOLDER/$BRAINTREE_MERCHANT_ID/" app.yaml
          sed -i "s/BRAINTREE_PUBLIC_KEY_PLACEHOLDER/$BRAINTREE_PUBLIC_KEY/" app.yaml
          sed -i "s/BRAINTREE_PRIVATE_KEY_PLACEHOLDER/$BRAINTREE_PRIVATE_KEY/" app.yaml
          sed -i "s/OCR_API_KEY_PLACEHOLDER/$OCR_API_KEY/" app.yaml
          sed -i "s/GROQ_API_KEY_PLACEHOLDER/$GROQ_API_KEY/" app.yaml
          sed -i "s/MAIL_ID_PLACEHOLDER/$MAIL_ID/" app.yaml
          sed -i "s/MAIL_PASSKEY_PLACEHOLDER/$MAIL_PASSKEY/" app.yaml
          sed -i "s/APP_SECURITY_SECRET_KEY/passwordpassword/" app.yaml  # Added Encryption Config
          sed -i "s/LOGGING_LEVEL_ROOT/INFO/" app.yaml  # Added Logging
          sed -i "s/SPRING_DATASOURCE_DRIVER_CLASS_NAME/org.postgresql.Driver/" app.yaml  # Added DB Config
          sed -i "s/SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT/org.hibernate.dialect.PostgreSQLDialect/" app.yaml
          sed -i "s/SPRING_JPA_HIBERNATE_DDL_AUTO/update/" app.yaml
          sed -i "s|SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI|$OAUTH2_REDIRECT_URI|" app.yaml
          sed -i "s/SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE/profile,email/" app.yaml  # Added Oauth2 Config
          sed -i "s/SPRING_MAIL_HOST/smtp.gmail.com/" app.yaml  # Added Mail Config
          sed -i "s/SPRING_MAIL_PORT/587/" app.yaml
          sed -i "s/SPRING_MAIL_USERNAME/${MAIL_ID}/" app.yaml  # Added Mail Username
          sed -i "s/SPRING_MAIL_PASSWORD/${MAIL_PASSKEY}/" app.yaml  # Added Mail Password
          sed -i "s/GROQ_API_URL/https:\/\/api.groq.com\/openai\/v1\/chat\/completions/" app.yaml  # Added GROQ API URL
          sed -i "s/OCR_API_URL/https:\/\/api.ocr.space\/parse\/image/" app.yaml  # Added OCR API URL
          sed -i "s|SPRING_PROFILES_ACTIVE_PLACEHOLDER|prod|" app.yaml

      # Step 5: Deploy to Google App Engine
      - name: Deploy to App Engine
        run: |
          gcloud app deploy --quiet
